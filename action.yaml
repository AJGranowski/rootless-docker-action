name: Rootless Docker
author: Kurt von Laven
description: Run Docker in Rootless Mode to Prevent Permission Errors
branding:
  icon: lock
  color: blue
runs:
  using: composite
  steps:
    - name: Check whether rootless Docker is already installed and/or in-use.
      id: rootless-docker
      run: |
        in_use='false'
        if docker context ls --format '{{ .Name }}' | grep --quiet '^rootless$'
        then
          installed='true'
          if [[ "$(docker info --format '{{ .ClientInfo.Context }}')" == 'rootless' ]]
          then
            in_use='true'
          fi
        else
          installed='false'
        fi
        echo "INSTALLED=$installed" >>"$GITHUB_OUTPUT"
        echo "IN_USE=$in_use" >>"$GITHUB_OUTPUT"
      shell: bash
    - name: Stop rootful Docker daemon.
      if: steps.rootless-docker.outputs.IN_USE != 'true'
      run: sudo systemctl stop docker.service
      shell: bash
    - name: Check AppArmor version
      id: apparmor
      run: |
        abi4_version="$(find /etc/apparmor.d/abi -maxdepth 1 -name '4.*' -printf '%f\n' | sort -nr | head -1)"
        echo "$abi4_version"
        echo "ABI4_VERSION=$abi4_version" >>"$GITHUB_OUTPUT"
      shell: bash
    - name: Configure AppArmor
      if: steps.rootless-docker.outputs.INSTALLED != 'true' && steps.apparmor.outputs.ABI4_VERSION != ''
      env:
        ABI4_VERSION: ${{ steps.apparmor.outputs.ABI4_VERSION }}
      run: |
        filename=$(echo $HOME/bin/rootlesskit | sed -e s@^/@@ -e s@/@.@g)
        cat <<EOF > ~/${filename}
        abi <abi/${ABI4_VERSION}>,
        include <tunables/global>

        "$HOME/bin/rootlesskit" flags=(unconfined) {
          userns,

          include if exists <local/${filename}>
        }
        EOF
        sudo mv ~/${filename} /etc/apparmor.d/${filename}
        sudo systemctl restart apparmor.service
      shell: bash
    - name: Install rootless Docker, start daemon, and wait until it's listening.
      if: steps.rootless-docker.outputs.INSTALLED != 'true'
      run: |
        echo ~/bin >>"$GITHUB_PATH"
        if [[ -z $XDG_RUNTIME_DIR ]]; then
          XDG_RUNTIME_DIR=~/.docker/run
          echo XDG_RUNTIME_DIR="$XDG_RUNTIME_DIR" >>"$GITHUB_ENV"
        fi
        function awaitDockerd() {
          while IFS= read -r -t 60 line; do
            echo "$line"
            [[ "$line" = *"API listen on $XDG_RUNTIME_DIR/docker.sock"* ]] && return
          done
          echo 'Timed out waiting for Docker daemon to listen.' >&2
          return 1
        }

        install_script_output="$(
          curl \
          --fail-with-body \
          --silent \
          --show-error \
          --location https://get.docker.com/rootless |
          sh
        )"
        echo "$install_script_output"
        docker context use rootless
        if (
          grep --quiet 'systemd not detected, dockerd-rootless.sh needs to be started manually' \
          <<<"$install_script_output"
        ); then
          (PATH="/sbin:/usr/sbin:$PATH" dockerd-rootless.sh &) |&
          awaitDockerd
        fi
      env:
        FORCE_ROOTLESS_INSTALL: "1"
      shell: bash
    - name: Proxy bidirectionally between rootful and rootless Docker sockets.
      if: steps.rootless-docker.outputs.IN_USE != 'true'
      run: >
        sudo systemd-run
        --unit=docker-proxy.service
        --description='Bidirectional proxy between rootful and rootless Docker sockets'
        --service-type=exec
        --property=Requires=docker.socket
        --property=PrivateNetwork=true
        --property=PrivateTmp=true
        /lib/systemd/systemd-socket-proxyd "$XDG_RUNTIME_DIR/docker.sock"
      shell: bash
